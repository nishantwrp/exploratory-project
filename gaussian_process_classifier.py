# Written by Nishant Mittal aka nishantwrp

# Imports
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF

def check_probabilities(original_prob, new_prob, alpha):
    '''
    Checks if probabilites generated by current value of f are acceptable
    '''
    for i, original_prob_obj in enumerate(original_prob):
        original_prob_list = list(original_prob_obj)
        new_prob_list = list(new_prob[i])

        if ((alpha*max(original_prob_list)) > max(new_prob_list)):
            return False

    return True

def calculate_mrl(X, Y, alpha, initial_f):
    '''
    Calculates the mrl for a component
    '''
    kernel = 1.0 * RBF(1.0)
    gpc = GaussianProcessClassifier(kernel=kernel, random_state=0).fit(X, Y)
    original_prob = gpc.predict_proba(X)
    print("Probabilities for the complete MTS calculated")

    current_f = initial_f
    while True:
        gpc = GaussianProcessClassifier(kernel=kernel, random_state=0).fit(X[:, :current_f], Y)
        new_prob = gpc.predict_proba(X[:, :current_f])
        print("Probabilities calculated when value of F is %s" % (str(current_f)))

        if check_probabilities(original_prob, new_prob, alpha):
            break

        current_f += 1

    return current_f